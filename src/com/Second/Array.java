package com.Second;

public class Array {

    /**
     *  从排序数组中删除重复项
     * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
     *
     * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
     *
     * 示例 1:
     *
     * 给定数组 nums = [1,1,2],
     *
     * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
     *
     * 你不需要考虑数组中超出新长度后面的元素。
     * 示例 2:
     *
     * 给定 nums = [0,0,1,1,1,2,2,3,3,4],
     *
     * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
     *
     * 你不需要考虑数组中超出新长度后面的元素。
     * 说明:
     *
     * 为什么返回数值是整数，但输出的答案是数组呢?
     *
     * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
     *
     * 你可以想象内部操作如下:
     *
     * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
     * int len = removeDuplicates(nums);
     *
     * // 在函数里修改输入数组对于调用者是可见的。
     * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
     * for (int i = 0; i < len; i++) {
     *     print(nums[i]);
     */
    public int removeDuplicates(int[] nums) {
        //思路分析：
        //从有序的数组中删除重复项，可以使用双指针法，一个指针指向当前要比较的元素，一个指针指向重复元素的位置
        //当两个元素不同时，当前要比较元素的指针和重复元素的指针都向前移动
        //当两个元素相同时，重复元素指针不同，这样当出现下一个不重复元素的时候，就可以将该元素赋值到重复元素的位置
        //从而实现删除掉重复的元素


        //首先判断错误情况
        if(nums.length <= 1)
            return nums.length;
    int index = 1;
        for(int i = 0; i < nums.length -1; i++){
        if(nums[i] != nums[i+1]){
            nums[index] = nums[i+1];
            index++;
        }
    }
        return index;
}


    /**
     *   买卖股票的最佳时机 II
     * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
     *
     * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
     *
     * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     *
     * 示例 1:
     *
     * 输入: [7,1,5,3,6,4]
     * 输出: 7
     * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
     * 示例 2:
     *
     * 输入: [1,2,3,4,5]
     * 输出: 4
     * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
     * 示例 3:
     *
     * 输入: [7,6,4,3,1]
     * 输出: 0
     * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {
        //思路分析：题目中没有说买入之后只能在收益最大的一天卖出，那么就可以只要有收益就可以卖出
        //因此可以采用贪心算法，每一步都取对自己有利的结果
        //错误想法:买卖股票有个条件是在买股票之前手里没有股票，这个可以使用一个flag标志位判断。当买股票以后flag为true，否则为false
        //都不用判断手里有没有股票，只要下一天的价格大于前一天就可以，直接做减法

        //首先判断错误情况
        if(prices.length <= 1)
            return 0;

        int profit = 0;

        for(int i =0; i< prices.length -1; i++) {
            if (prices[i + 1] > prices[i]){
                profit = profit + prices[i+1] - prices[i];
            }
        }

        return profit;

    }
}
