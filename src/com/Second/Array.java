package com.Second;

public class Array {

    /**
     * 从排序数组中删除重复项
     * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
     * <p>
     * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
     * <p>
     * 示例 1:
     * <p>
     * 给定数组 nums = [1,1,2],
     * <p>
     * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
     * <p>
     * 你不需要考虑数组中超出新长度后面的元素。
     * 示例 2:
     * <p>
     * 给定 nums = [0,0,1,1,1,2,2,3,3,4],
     * <p>
     * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
     * <p>
     * 你不需要考虑数组中超出新长度后面的元素。
     * 说明:
     * <p>
     * 为什么返回数值是整数，但输出的答案是数组呢?
     * <p>
     * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
     * <p>
     * 你可以想象内部操作如下:
     * <p>
     * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
     * int len = removeDuplicates(nums);
     * <p>
     * // 在函数里修改输入数组对于调用者是可见的。
     * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
     * for (int i = 0; i < len; i++) {
     * print(nums[i]);
     */
    public int removeDuplicates(int[] nums) {
        //思路分析：
        //从有序的数组中删除重复项，可以使用双指针法，一个指针指向当前要比较的元素，一个指针指向重复元素的位置
        //当两个元素不同时，当前要比较元素的指针和重复元素的指针都向前移动
        //当两个元素相同时，重复元素指针不同，这样当出现下一个不重复元素的时候，就可以将该元素赋值到重复元素的位置
        //从而实现删除掉重复的元素


        //首先判断错误情况
        if (nums.length <= 1)
            return nums.length;
        int index = 1;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] != nums[i + 1]) {
                nums[index] = nums[i + 1];
                index++;
            }
        }
        return index;
    }


    /**
     * 买卖股票的最佳时机 II
     * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
     * <p>
     * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
     * <p>
     * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
     * <p>
     * 示例 1:
     * <p>
     * 输入: [7,1,5,3,6,4]
     * 输出: 7
     * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
     * 示例 2:
     * <p>
     * 输入: [1,2,3,4,5]
     * 输出: 4
     * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
     * 示例 3:
     * <p>
     * 输入: [7,6,4,3,1]
     * 输出: 0
     * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
     *
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {
        //思路分析：题目中没有说买入之后只能在收益最大的一天卖出，那么就可以只要有收益就可以卖出
        //因此可以采用贪心算法，每一步都取对自己有利的结果
        //错误想法:买卖股票有个条件是在买股票之前手里没有股票，这个可以使用一个flag标志位判断。当买股票以后flag为true，否则为false
        //都不用判断手里有没有股票，只要下一天的价格大于前一天就可以，直接做减法

        //首先判断错误情况
        if (prices.length <= 1)
            return 0;

        int profit = 0;

        for (int i = 0; i < prices.length - 1; i++) {
            if (prices[i + 1] > prices[i]) {
                profit = profit + prices[i + 1] - prices[i];
            }
        }
        return profit;
    }


    /**
     * 旋转数组
     * 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
     *
     * 示例 1:
     *
     * 输入: [1,2,3,4,5,6,7] 和 k = 3
     * 输出: [5,6,7,1,2,3,4]
     * 解释:
     * 向右旋转 1 步: [7,1,2,3,4,5,6]
     * 向右旋转 2 步: [6,7,1,2,3,4,5]
     * 向右旋转 3 步: [5,6,7,1,2,3,4]
     * 示例 2:
     *
     * 输入: [-1,-100,3,99] 和 k = 2
     * 输出: [3,99,-1,-100]
     * 解释:
     * 向右旋转 1 步: [99,-1,-100,3]
     * 向右旋转 2 步: [3,99,-1,-100]n
     * 说明:
     *
     * 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
     * 要求使用空间复杂度为 O(1) 的原地算法。
     * @param nums
     * @param k
     */
    public void rotate_v1(int[] nums, int k) {
//        思路1：
//            只要能实现向右旋转1次，那么就可以实现向右旋转n次
//            向右旋转1次，先将数组最后一位保存到temp中，然后将数组的每一位都向右移动
//            最后将最后一位数字赋值到首位
//            空间复杂度为O(n^2)
        //首先判断错误情况
        if(nums.length <=1 )
            return;

        //向右旋转的次数
        for(int i = 0; i < k; i++){
            //保留最后一位数字
            int temp = nums[nums.length - 1 ];
            //依次将数组的元素向移动
            for(int j = nums.length - 1; j > 0; j--){
                nums[j] = nums[j-1];
            }
            nums[0] = temp;
        }
    }

    public void rotate_v2(int[] nums, int k) {
//        思路：
//          利用三次旋转达到要求
//          第一次旋转将数组全部翻转一次，[1,2,3,4,5,6]——[6,5,4,3,2,1]
//          第二次将[0，k)的数字翻转
//          第三次将[k,nums.length-1]的数字翻转
//          时间复杂福O(n)

        //判断错误输入情况
        if(nums.length <= 1 || k ==0 || k==nums.length)
            return;

        int time = k % nums.length;
        //翻转数组
        reverse(nums,0,nums.length - 1);
        reverse(nums,0,time - 1 );
        reverse(nums,time,nums.length - 1);
    }

        //定义翻转函数
    public void reverse(int[] nums,int start,int end){
        for(int i = start; i <= (start + end) / 2  ; i++){
            int temp = nums[i];
            nums[i] = nums[start + end - i];
            nums[start + end - i] = temp;
        }
}


}
